OOPS in JAVA
-------------------------------------
1. class
2. object
3. encapulation
		-> access modifers like public, protected, defult and private
		-> packages
		-> POJO (plain old java object), Bean, Model 
		-> method overloading
4. inheritance
		-> reuse class code
		-> method overriding 
5. abstraction
		-> hiding 
		-> method override restirictions
		-> tight coupling
6. polymorphism
		-> interface -> loose couling


   40% - OOPS
   20% - java.lang package
   10% - IO operations
   30% - collection api

   ---------------------

   JDBC API

   Employee{

       void display();
       void delete();
       void update();
       void save();
   }

   Employee e1; : junior 
   Employee e2; : senior
   Employee e3; : senior lead


  class Abc{} - POJO

   Hibernate
   Spring
   JPA
   Structs




  class A{

  	int a; 
  	static int b;

  	void f1(){
  	   b=20; // valid
  	   a=200; // valid
  	}
  	static void f2(){
  	  b=300; // valid
  	  a=500; // invalid
  	  A obj=new A();
      obj.a=500; // valid
  	}
  }

  class B{
    
       void f3(){
       		A obj=new A();
       		 obj.a=200;
       }

       static void f4(){
             A obj=new A();
       		 obj.a=200;
       }

  }


 -> should create in static methods of the same class
 -> should create in static , non static(instance) methods and constructors of other classes





























